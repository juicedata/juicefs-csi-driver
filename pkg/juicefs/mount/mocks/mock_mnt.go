// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicedata/juicefs-csi-driver/pkg/juicefs/mount (interfaces: MntInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/juicedata/juicefs-csi-driver/pkg/config"
	mount "k8s.io/utils/mount"
)

// MockMntInterface is a mock of MntInterface interface.
type MockMntInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMntInterfaceMockRecorder
}

// MockMntInterfaceMockRecorder is the mock recorder for MockMntInterface.
type MockMntInterfaceMockRecorder struct {
	mock *MockMntInterface
}

// NewMockMntInterface creates a new mock instance.
func NewMockMntInterface(ctrl *gomock.Controller) *MockMntInterface {
	mock := &MockMntInterface{ctrl: ctrl}
	mock.recorder = &MockMntInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMntInterface) EXPECT() *MockMntInterfaceMockRecorder {
	return m.recorder
}

// AddRefOfMount mocks base method.
func (m *MockMntInterface) AddRefOfMount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRefOfMount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRefOfMount indicates an expected call of AddRefOfMount.
func (mr *MockMntInterfaceMockRecorder) AddRefOfMount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefOfMount", reflect.TypeOf((*MockMntInterface)(nil).AddRefOfMount), arg0, arg1, arg2)
}

// CleanCache mocks base method.
func (m *MockMntInterface) CleanCache(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanCache", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanCache indicates an expected call of CleanCache.
func (mr *MockMntInterfaceMockRecorder) CleanCache(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanCache", reflect.TypeOf((*MockMntInterface)(nil).CleanCache), arg0, arg1, arg2, arg3, arg4)
}

// GetMountRef mocks base method.
func (m *MockMntInterface) GetMountRef(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMountRef", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMountRef indicates an expected call of GetMountRef.
func (mr *MockMntInterfaceMockRecorder) GetMountRef(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMountRef", reflect.TypeOf((*MockMntInterface)(nil).GetMountRef), arg0, arg1, arg2)
}

// GetMountRefs mocks base method.
func (m *MockMntInterface) GetMountRefs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMountRefs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMountRefs indicates an expected call of GetMountRefs.
func (mr *MockMntInterfaceMockRecorder) GetMountRefs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMountRefs", reflect.TypeOf((*MockMntInterface)(nil).GetMountRefs), arg0)
}

// IsLikelyNotMountPoint mocks base method.
func (m *MockMntInterface) IsLikelyNotMountPoint(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikelyNotMountPoint", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikelyNotMountPoint indicates an expected call of IsLikelyNotMountPoint.
func (mr *MockMntInterfaceMockRecorder) IsLikelyNotMountPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikelyNotMountPoint", reflect.TypeOf((*MockMntInterface)(nil).IsLikelyNotMountPoint), arg0)
}

// JCreateVolume mocks base method.
func (m *MockMntInterface) JCreateVolume(arg0 context.Context, arg1 *config.JfsSetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JCreateVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JCreateVolume indicates an expected call of JCreateVolume.
func (mr *MockMntInterfaceMockRecorder) JCreateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JCreateVolume", reflect.TypeOf((*MockMntInterface)(nil).JCreateVolume), arg0, arg1)
}

// JDeleteVolume mocks base method.
func (m *MockMntInterface) JDeleteVolume(arg0 context.Context, arg1 *config.JfsSetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JDeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JDeleteVolume indicates an expected call of JDeleteVolume.
func (mr *MockMntInterfaceMockRecorder) JDeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JDeleteVolume", reflect.TypeOf((*MockMntInterface)(nil).JDeleteVolume), arg0, arg1)
}

// JMount mocks base method.
func (m *MockMntInterface) JMount(arg0 context.Context, arg1 *config.AppInfo, arg2 *config.JfsSetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JMount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// JMount indicates an expected call of JMount.
func (mr *MockMntInterfaceMockRecorder) JMount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JMount", reflect.TypeOf((*MockMntInterface)(nil).JMount), arg0, arg1, arg2)
}

// JUmount mocks base method.
func (m *MockMntInterface) JUmount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JUmount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// JUmount indicates an expected call of JUmount.
func (mr *MockMntInterfaceMockRecorder) JUmount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JUmount", reflect.TypeOf((*MockMntInterface)(nil).JUmount), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockMntInterface) List() ([]mount.MountPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]mount.MountPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMntInterfaceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMntInterface)(nil).List))
}

// Mount mocks base method.
func (m *MockMntInterface) Mount(arg0, arg1, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockMntInterfaceMockRecorder) Mount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockMntInterface)(nil).Mount), arg0, arg1, arg2, arg3)
}

// MountSensitive mocks base method.
func (m *MockMntInterface) MountSensitive(arg0, arg1, arg2 string, arg3, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountSensitive", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountSensitive indicates an expected call of MountSensitive.
func (mr *MockMntInterfaceMockRecorder) MountSensitive(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountSensitive", reflect.TypeOf((*MockMntInterface)(nil).MountSensitive), arg0, arg1, arg2, arg3, arg4)
}

// UmountTarget mocks base method.
func (m *MockMntInterface) UmountTarget(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UmountTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UmountTarget indicates an expected call of UmountTarget.
func (mr *MockMntInterfaceMockRecorder) UmountTarget(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UmountTarget", reflect.TypeOf((*MockMntInterface)(nil).UmountTarget), arg0, arg1, arg2)
}

// Unmount mocks base method.
func (m *MockMntInterface) Unmount(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockMntInterfaceMockRecorder) Unmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockMntInterface)(nil).Unmount), arg0)
}
